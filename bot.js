const TelegramBot = require('node-telegram-bot-api');
const { createWorker } = require('tesseract.js');
const axios = require('axios');
const fs = require('fs');
const path = require('path');

// üîë –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è (–Ω–µ –≤—Å—Ç–∞–≤–ª—è–π —Å—é–¥–∞ —Ç–æ–∫–µ–Ω—ã!)
const TELEGRAM_BOT_TOKEN = process.env.TELEGRAM_BOT_TOKEN;
const DEEPSEEK_API_KEY = process.env.DEEPSEEK_API_KEY;
const MODEL = 'deepseek-coder'; // –º–æ–∂–Ω–æ –∑–∞–º–µ–Ω–∏—Ç—å –Ω–∞ deepseek-chat

// –ü–∞–ø–∫–∞ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏ –¥–∏–∞–ª–æ–≥–æ–≤
const SESSIONS_DIR = './sessions';
if (!fs.existsSync(SESSIONS_DIR)) {
  fs.mkdirSync(SESSIONS_DIR);
}

// –°–æ–∑–¥–∞—ë–º –±–æ—Ç–∞
const bot = new TelegramBot(TELEGRAM_BOT_TOKEN, { polling: true });

// OCR: –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Tesseract
let worker;
async function initOCR() {
  worker = createWorker({
    logger: m => console.log(`OCR: ${m.status} ${Math.round(m.progress * 100)}%`),
  });
  await worker.load();
  await worker.loadLanguage('eng+rus');
  await worker.initialize('eng+rus');
  console.log('‚úÖ OCR-–¥–≤–∏–∂–æ–∫ Tesseract –≥–æ—Ç–æ–≤');
}
initOCR();

// –ó–∞–≥—Ä—É–∑–∫–∞ –∏—Å—Ç–æ—Ä–∏–∏ –¥–∏–∞–ª–æ–≥–∞
function loadSession(chatId) {
  const file = path.join(SESSIONS_DIR, `${chatId}.json`);
  if (fs.existsSync(file)) {
    return JSON.parse(fs.readFileSync(file, 'utf-8'));
  }
  return [];
}

// –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ –¥–∏–∞–ª–æ–≥–∞
function saveSession(chatId, messages) {
  const file = path.join(SESSIONS_DIR, `${chatId}.json`);
  fs.writeFileSync(file, JSON.stringify(messages, null, 2));
}

// –û—Ç–ø—Ä–∞–≤–∫–∞ –¥–ª–∏–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è (—Ä–∞–∑–±–∏–≤–∫–∞ –Ω–∞ —á–∞—Å—Ç–∏)
function sendLong(bot, chatId, text, options = {}) {
  const chunkSize = 4000;
  for (let i = 0; i < text.length; i += chunkSize) {
    const chunk = text.slice(i, i + chunkSize);
    setTimeout(() => {
      bot.sendMessage(chatId, chunk, options).catch(console.error);
    }, (i / chunkSize) * 500);
  }
}

// –ó–∞–ø—Ä–æ—Å –∫ DeepSeek –Ω–∞–ø—Ä—è–º—É—é (–±–µ–∑ nodul.ru)
async function askDeepSeek(messages) {
  try {
    const response = await axios.post(
      'https://api.deepseek.com/v1/chat/completions',
      {
        model: MODEL,
        messages: messages,
        max_tokens: 2048,
        temperature: 0.7,
      },
      {
        headers: {
          'Authorization': `Bearer ${DEEPSEEK_API_KEY}`,
          'Content-Type': 'application/json',
        },
      }
    );
    return response.data.choices[0].message.content;
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ DeepSeek:', error.response?.data || error.message);
    return '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ –Ω–µ–π—Ä–æ—Å–µ—Ç–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.';
  }
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ /start
bot.onText(/\/start/, (msg) => {
  const chatId = msg.chat.id;
  bot.sendMessage(chatId, `
ü§ñ *JS Assistant Bot* –Ω–∞ –±–∞–∑–µ DeepSeek-Coder

–Ø –ø–æ–º–æ–≥—É —Å:
- –û–±—ä—è—Å–Ω–µ–Ω–∏–µ–º –∫–æ–¥–∞ –Ω–∞ JavaScript
- –ê–Ω–∞–ª–∏–∑–æ–º —Å–∫—Ä–∏–Ω—à–æ—Ç–æ–≤ (OCR)
- –ü–æ–∏—Å–∫–æ–º –æ—à–∏–±–æ–∫
- –ì–µ–Ω–µ—Ä–∞—Ü–∏–µ–π –ø—Ä–∏–º–µ—Ä–æ–≤

üìå –ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ –≤–æ–ø—Ä–æ—Å –∏–ª–∏ –ø—Ä–∏—à–ª–∏—Ç–µ —Ñ–æ—Ç–æ –∫–æ–¥–∞.
  `, { parse_mode: 'Markdown' });
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π
bot.on('message', async (msg) => {
  const chatId = msg.chat.id;
  const text = msg.text;
  const photo = msg.photo;
  const document = msg.document;

  let session = loadSession(chatId);

  if (text && !text.startsWith('/')) {
    bot.sendMessage(chatId, 'üß† –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –≤–∞—à –∑–∞–ø—Ä–æ—Å...');
    session.push({ role: 'user', content: text });

    const reply = await askDeepSeek(session);
    session.push({ role: 'assistant', content: reply });
    saveSession(chatId, session);

    sendLong(bot, chatId, reply, { parse_mode: 'Markdown' });
  }

  if (photo) {
    bot.sendMessage(chatId, 'üñºÔ∏è –†–∞—Å–ø–æ–∑–Ω–∞—é —Ç–µ–∫—Å—Ç —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è...');
    const fileId = photo[photo.length - 1].file_id;
    const file = await bot.getFile(fileId);
    const fileUrl = `https://api.telegram.org/file/bot${TELEGRAM_BOT_TOKEN}/${file.file_path}`;

    try {
      const result = await worker.recognize(fileUrl);
      const extracted = result.data.text.trim();

      if (extracted) {
        bot.sendMessage(chatId, `\`\`\`\n${extracted}\n\`\`\`\n\nüîç –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –∫–æ–¥...`, { parse_mode: 'Markdown' });

        const prompt = `–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —ç—Ç–æ—Ç –∫–æ–¥ –∏–ª–∏ –æ—à–∏–±–∫—É –∏ –æ–±—ä—è—Å–Ω–∏:\n\n${extracted}`;
        session.push({ role: 'user', content: prompt });

        const reply = await askDeepSeek(session);
        session.push({ role: 'assistant', content: reply });
        saveSession(chatId, session);

        sendLong(bot, chatId, reply, { parse_mode: 'Markdown' });
      } else {
        bot.sendMessage(chatId, '‚ùå –¢–µ–∫—Å—Ç –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–π —Å–∫—Ä–∏–Ω—à–æ—Ç.');
      }
    } catch (err) {
      bot.sendMessage(chatId, '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è.');
      console.error(err);
    }
  }

  if (document) {
    const fileName = msg.document.file_name;
    if (fileName.endsWith('.js') || fileName.endsWith('.txt')) {
      bot.sendMessage(chatId, 'üìÑ –ß–∏—Ç–∞—é —Ñ–∞–π–ª...');
      const file = await bot.getFile(msg.document.file_id);
      const fileUrl = `https://api.telegram.org/file/bot${TELEGRAM_BOT_TOKEN}/${file.file_path}`;
      const response = await axios.get(fileUrl);
      const content = response.data.toString().substring(0, 16000);

      const prompt = `–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π JS-–∫–æ–¥:\n\`\`\`js\n${content}\n\`\`\``;
      session.push({ role: 'user', content: prompt });

      const reply = await askDeepSeek(session);
      session.push({ role: 'assistant', content: reply });
      saveSession(chatId, session);

      sendLong(bot, chatId, reply, { parse_mode: 'Markdown' });
    }
  }
});

console.log('‚úÖ JS Assistant Bot –∑–∞–ø—É—â–µ–Ω. –ì–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!');
